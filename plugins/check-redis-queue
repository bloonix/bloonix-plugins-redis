#!/usr/bin/perl

=head1 NAME

check-redis-queue - Plugin to check redis queues.

=head1 SYNOPSIS

    check-redis-queue [ OPTIONS ]

    check-redis-queue --help

=head1 REPORTING BUGS

Please report all bugs to <support(at)bloonix.de>.

=head1 AUTHOR

Jonny Schulz <support(at)bloonix.de>.

=head1 POWERED BY

     _    __ _____ _____ __  __ __ __   __
    | |__|  |     |     |  \|  |__|\  \/  /
    |  . |  |  |  |  |  |      |  | >    <
    |____|__|_____|_____|__|\__|__|/__/\__\

=head1 COPYRIGHT

Copyright (C) 2014 by Jonny Schulz. All rights reserved.

=cut

use strict;
use warnings;
use Bloonix::Plugin;
use Bloonix::Plugin::Socket;

my $plugin = Bloonix::Plugin->new(version => "0.1");

$plugin->example(
    description => "Check a Redis queue",
    arguments => [
        host => "127.0.0.1",
        port => 6379,
        timeout => 10,
        queue => "logstash",
        warning => "size:gt:1000",
        critical => "size:gt:2000"
    ]
);

$plugin->has_host(default => "127.0.0.1");
$plugin->has_port(default => 6379);
$plugin->has_timeout(default => 10);

$plugin->add_option(
    name => "Database",
    option => "database",
    value => "database",
    value_type => "integer",
    default => 0,
    regex => qr!^(1[0-6]|[0-9])\z!,
    mandatory => 1,
    description => "The database name to connect to. Possible values are 0 - 16."
);

$plugin->add_option(
    name => "Queue",
    option => "queue",
    value => "queue",
    value_type => "string",
    mandatory => 1,
    description => "The queue/key to check the size with the redis command LLEN."
);

$plugin->has_threshold(keys => [ { key => "size" } ]);

my $opt = $plugin->parse_options;
my $size;

$plugin->eval(
    timeout => $opt->{timeout},
    action => "connection",
    callback => sub {
        my $sock = Bloonix::Plugin::Socket->connect(
            host => $opt->{host},
            port => $opt->{port}
        ) or die "unable to connect to $opt->{host}:$opt->{port}";

        $sock->send(
            data => join("\r\n",
                '*2',
                '$6',
                'SELECT',
                '$' . length($opt->{database}),
                $opt->{database},
                ''
            )
        );

        my $ok = $sock->readline;

        if ($ok !~ /^\+OK/) {
            $plugin->exit(
                status => "CRITICAL",
                message => "unable to select database $opt->{database}"
            );
        }

        $sock->send(
            data => join("\r\n",
                '*2',
                '$4',
                'LLEN',
                '$'. length $opt->{queue},
                $opt->{queue},
                ''
            )
        );

        my $res = $sock->readline;

        if ($res && $res =~ /^:(\d+)/) {
            $size = $1;
        }
    }
);

if (!$size) {
    $plugin->exit(
        status => "UNKNOWN",
        message => "no redis statistics received"
    );
}

my $result = $plugin->check_thresholds(
    stats => { size => $size },
    upshot_keys => [ "size" ]
);

$plugin->exit(
    status => $result->{status},
    message => "queue $opt->{queue} checked, size=$size",
    stats => { size => $size }
);
