#!/usr/bin/perl

=head1 NAME

check-redis - Plugin to check redis.

=head1 SYNOPSIS

    check-redis [ OPTIONS ]

    check-redis --help

=head1 REPORTING BUGS

Please report all bugs to <support(at)bloonix.de>.

=head1 AUTHOR

Jonny Schulz <support(at)bloonix.de>.

=head1 POWERED BY

     _    __ _____ _____ __  __ __ __   __
    | |__|  |     |     |  \|  |__|\  \/  /
    |  . |  |  |  |  |  |      |  | >    <
    |____|__|_____|_____|__|\__|__|/__/\__\

=head1 COPYRIGHT

Copyright (C) 2014 by Jonny Schulz. All rights reserved.

=cut

use strict;
use warnings;
use Bloonix::Plugin;
use Bloonix::Plugin::Socket;

my $plugin = Bloonix::Plugin->new(version => "0.2");

$plugin->example(
    description => "Check Redis",
    arguments => [
        host => "127.0.0.1",
        port => 6379,
        timeout => 10,
        warning => "hitratio:lt:97",
        critical => "hitratio:lt:95"
    ]
);

$plugin->has_host(default => "127.0.0.1");
$plugin->has_port(default => 6379);
$plugin->has_timeout(default => 10);

$plugin->has_threshold(
    keys => [
        { key => "connected_clients" },
        { key => "blocked_clients" },
        { key => "used_memory", unit => "bytes" },
        { key => "connections" },
        { key => "requests" },
        { key => "expired" },
        { key => "evicted" },
        { key => "hits" },
        { key => "misses" },
        { key => "hitratio", unit => "percent" },
        { key => "missratio", unit => "percent" }
    ]
);

my $opt = $plugin->parse_options;
my $output;
my $stat = {};

$plugin->eval(
    timeout => $opt->{timeout},
    action => "connection",
    callback => sub {
        my $sock = Bloonix::Plugin::Socket->connect(
            host => $opt->{host},
            port => $opt->{port}
        ) or die "unable to connect to $opt->{host}:$opt->{port}";

        $sock->send(
            data => join("\r\n",
                '*1', '$4', 'INFO', ''
            )
        );

        my $res = $sock->readline;

        if ($res && $res =~ /^\$(\d+)/) {
            $output = $sock->read(length => $1);
        }
    }
);

if (!$output) {
    $plugin->exit(
        status => "UNKNOWN",
        message => "no redis statistics received"
    );
}

my %keymap = (
    connected_clients => "connected_clients",
    blocked_clients => "blocked_clients",
    used_memory => "used_memory",
    total_connections_received => "connections",
    total_commands_processed => "requests",
    expired_keys => "expired",
    evicted_keys => "evicted",
    keyspace_hits => "hits",
    keyspace_misses => "misses"
);

foreach my $row (split /[\r\n]+/, $output) {
    if ($row =~ /^(.+?):(.+)/) {
        my ($key, $value) = ($1, $2);
        $key =~ s/\s//g;
        $value =~ s/\s//g;

        if ($keymap{$key}) {
            $stat->{ $keymap{$key} } = $value;
        }
    }
}

my $total = $stat->{hits} + $stat->{misses};

if ($total) {
    $stat->{hitratio} = sprintf("%.2f", $stat->{hits} / $total * 100);
    $stat->{missratio} = sprintf("%.2f", $stat->{misses} / $total * 100);
} else {
    $stat->{hitratio} = "0.00";
    $stat->{missratio} = "0.00";
}

$plugin->delta(stat => $stat, keys => [qw(connections requests expired evicted hits misses)]);

$plugin->check_thresholds(
    stats => $stat,
    upshot_keys => [qw(connections requests hitratio missratio)],
    exit => "yes"
);
